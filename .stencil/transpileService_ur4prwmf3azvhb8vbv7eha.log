{"moduleFile":{"sourceFilePath":"/home/gustas/Assignment/src/components/display-table/display-table.tsx","jsFilePath":"/home/gustas/Assignment/src/components/display-table/display-table.js","cmps":[{"isLegacy":false,"tagName":"app-display-table","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"DisplayTable","elementRef":null,"encapsulation":"none","properties":[{"name":"keys","type":"unknown","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"[]","complexType":{"original":"any[]","resolved":"any[]","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"pageSize","type":"number","attribute":"page-size","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"number","resolved":"number","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"url","type":"string","attribute":"url","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"results","type":"number","attribute":"results","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"number","resolved":"number","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"data"},{"name":"dataToDisplay"},{"name":"globalKeyword"},{"name":"columnKeywords"},{"name":"columnSort"},{"name":"page"}],"methods":[],"listeners":[],"events":[{"name":"getData","method":"getData","bubbles":true,"cancelable":true,"composed":true,"docs":{"tags":[],"text":""},"complexType":{"original":"any","resolved":"any","references":{}},"internal":false}],"watchers":[],"styles":[{"modeName":"$","styleId":"APP-DISPLAY-TABLE","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/home/gustas/Assignment/src/components/display-table/display-table.css","relativePath":"display-table.css","originalComponentPath":"display-table.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/home/gustas/Assignment/src/components/display-table/display-table.js","sourceFilePath":"/home/gustas/Assignment/src/components/display-table/display-table.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":true,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":true,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":true,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":true,"hasPropBoolean":false,"hasPropString":true,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["class","value"],"htmlTagNames":["div","input","table","tbody","tr","td"],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@stencil/core"],"potentialCmpRefs":[]},"jsText":"import { h } from \"@stencil/core\";\r\nexport class DisplayTable {\r\n    constructor() {\r\n        this.initialData = [];\r\n        this.data = [];\r\n        this.dataToDisplay = [];\r\n        this.globalKeyword = \"\";\r\n        this.columnKeywords = [];\r\n        this.columnSort = [];\r\n        this.page = 1;\r\n        this.keys = [];\r\n        this.nextPage = () => {\r\n            if (this.data.length % this.pageSize === 0) {\r\n                if (this.page < this.data.length / this.pageSize) {\r\n                    this.page = this.page + 1;\r\n                }\r\n            }\r\n            else {\r\n                if (this.page <= this.data.length / this.pageSize) {\r\n                    this.page = this.page + 1;\r\n                }\r\n            }\r\n        };\r\n        this.prevPage = () => {\r\n            if (this.page > 1) {\r\n                this.page = this.page - 1;\r\n            }\r\n        };\r\n        this.resetPage = () => {\r\n            this.page = 1;\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        this.getDataHandler();\r\n        const newArray = new Array(this.keys.length).fill(\"\");\r\n        this.columnKeywords = newArray;\r\n        this.columnSort = newArray;\r\n    }\r\n    componentWillRender() {\r\n        this.handleData();\r\n    }\r\n    getDataHandler() {\r\n        this.getData.emit({\r\n            url: this.url,\r\n            results: this.results,\r\n            callback: data => {\r\n                this.initialData = data.results;\r\n                this.data = data.results;\r\n            }\r\n        });\r\n    }\r\n    handleData() {\r\n        let index;\r\n        this.data = this.initialData;\r\n        if (this.globalKeyword !== \"\") {\r\n            this.filterGlobally();\r\n        }\r\n        if (!this.columnKeywords.every(function (item) {\r\n            return item === \"\";\r\n        })) {\r\n            this.filterColumn();\r\n        }\r\n        if (!this.columnSort.every(function (item) {\r\n            return item === \"\";\r\n        })) {\r\n            let order = this.columnSort.find(function (item) {\r\n                return item !== \"\";\r\n            });\r\n            index = this.columnSort.findIndex(function (item) {\r\n                return item !== \"\";\r\n            });\r\n            this.sortColumn(this.keys[index], order);\r\n        }\r\n    }\r\n    filterGlobally() {\r\n        let tempKeys = this.keys;\r\n        let gWords = this.globalKeyword.split(\" \");\r\n        for (let i = 0; i < gWords.length; i++) {\r\n            this.data = this.data.filter(function (item) {\r\n                for (let j = 0; j < tempKeys.length; j++) {\r\n                    if (item[tempKeys[j]].toLowerCase().includes(gWords[i].toLowerCase())) {\r\n                        return true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    filterColumn() {\r\n        let tempKeys = this.keys;\r\n        for (let i = 0; i < this.columnKeywords.length; i++) {\r\n            if (this.columnKeywords[i] !== \"\") {\r\n                let keyWords = this.columnKeywords[i].split(\" \");\r\n                for (let j = 0; j < keyWords.length; j++) {\r\n                    this.data = this.data.filter(function (item) {\r\n                        if (item[tempKeys[i]]\r\n                            .toLowerCase()\r\n                            .includes(keyWords[j].toLowerCase())) {\r\n                            return true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    sortColumn(key, order) {\r\n        this.data = this.data.sort(this.compareValues(key, order));\r\n    }\r\n    compareValues(key, order = \"asc\") {\r\n        return function (a, b) {\r\n            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n                return 0;\r\n            }\r\n            const varA = typeof a[key] == \"string\" ? a[key].toLowerCase() : a[key];\r\n            const varB = typeof b[key] == \"string\" ? b[key].toLowerCase() : b[key];\r\n            let comparison = 0;\r\n            if (varA > varB) {\r\n                comparison = 1;\r\n            }\r\n            else if (varB > varA) {\r\n                comparison = -1;\r\n            }\r\n            return order == \"desc\" ? comparison * -1 : comparison;\r\n        };\r\n    }\r\n    changeGlobalKeyword(e) {\r\n        this.globalKeyword = e.target.value.toString();\r\n        this.resetPage();\r\n    }\r\n    changeColumnKeyword(e, key) {\r\n        this.columnKeywords = this.columnKeywords.map((item, index) => {\r\n            if (index === key) {\r\n                return e.target.value.toString();\r\n            }\r\n            else {\r\n                return item;\r\n            }\r\n        });\r\n        this.resetPage();\r\n    }\r\n    changeOrder(key) {\r\n        let temporaryValue;\r\n        if (this.columnSort[key] === \"\" || this.columnSort[key] === \"asc\") {\r\n            temporaryValue = \"desc\";\r\n        }\r\n        else {\r\n            temporaryValue = \"asc\";\r\n        }\r\n        this.columnSort = this.columnSort.map((item, index) => {\r\n            if (index === key) {\r\n                item = temporaryValue;\r\n            }\r\n            else {\r\n                item = \"\";\r\n            }\r\n            return item;\r\n        });\r\n    }\r\n    render() {\r\n        let temp = this.pageSize * (this.page - 1);\r\n        let dataToDisplay = this.data.slice(temp, temp + this.pageSize);\r\n        return (h(\"div\", { class: \"bigWrapper\" },\r\n            h(\"div\", { class: \"header\" },\r\n                h(\"div\", { class: \"headerText\" }, \"Search\"),\r\n                h(\"input\", { value: this.globalKeyword, onChange: e => {\r\n                        this.changeGlobalKeyword(e);\r\n                    } })),\r\n            h(\"div\", { class: \"tableHeader\" }, this.keys.map((key, index) => {\r\n                return (h(\"div\", { class: \"field\" },\r\n                    h(\"div\", { class: \"sortBtn\", onClick: () => {\r\n                            this.changeOrder(0);\r\n                        } },\r\n                        key,\r\n                        \" \\u2207\"),\r\n                    h(\"input\", { value: this.columnKeywords[index], onChange: e => {\r\n                            this.changeColumnKeyword(e, index);\r\n                        } })));\r\n            })),\r\n            this.initialData.length === 0 ? (h(\"div\", { class: \"popUp\" }, \"Loading...\")) : (h(\"div\", null,\r\n                h(\"table\", null,\r\n                    h(\"tbody\", null, dataToDisplay.length !== 0 ? (dataToDisplay.map(row => (h(\"tr\", null, this.keys.map(key => {\r\n                        return h(\"td\", null, row[key]);\r\n                    }))))) : (h(\"div\", { class: \"popUp\" }, \"No results found\")))),\r\n                h(\"div\", { class: \"footer\" },\r\n                    h(\"div\", { class: \"btn\", onClick: this.prevPage }, \"Previous Page\"),\r\n                    h(\"div\", { class: \"pageNumber\" }, this.page),\r\n                    h(\"div\", { class: \"btn\", onClick: this.nextPage }, \"Next Page\"))))));\r\n    }\r\n    static get is() { return \"app-display-table\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"display-table.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"display-table.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"keys\": {\r\n            \"type\": \"unknown\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"any[]\",\r\n                \"resolved\": \"any[]\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"defaultValue\": \"[]\"\r\n        },\r\n        \"pageSize\": {\r\n            \"type\": \"number\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"number\",\r\n                \"resolved\": \"number\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"page-size\",\r\n            \"reflect\": false\r\n        },\r\n        \"url\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"url\",\r\n            \"reflect\": false\r\n        },\r\n        \"results\": {\r\n            \"type\": \"number\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"number\",\r\n                \"resolved\": \"number\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"results\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"data\": {},\r\n        \"dataToDisplay\": {},\r\n        \"globalKeyword\": {},\r\n        \"columnKeywords\": {},\r\n        \"columnSort\": {},\r\n        \"page\": {}\r\n    }; }\r\n    static get events() { return [{\r\n            \"method\": \"getData\",\r\n            \"name\": \"getData\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            }\r\n        }]; }\r\n}\r\n"}